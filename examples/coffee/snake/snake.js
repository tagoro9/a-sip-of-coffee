// Generated by CoffeeScript 1.3.3
(function() {
  var Canvas, Food, Game, Point, Snake, canvas, cw, game,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  cw = 10;

  Canvas = (function() {

    function Canvas(id) {
      var _this = this;
      if (id == null) {
        id = "canvas";
      }
      $(document).ready(function() {
        var canvas;
        canvas = $("#" + id)[0];
        _this.canvas = canvas.getContext("2d");
        _this.w = $('#canvas').width();
        _this.h = $('#canvas').height();
        return _this.reset();
      });
    }

    Canvas.prototype.reset = function() {
      this.canvas.fillStyle = "#CCC";
      this.canvas.fillRect(0, 0, this.w, this.h);
      return this.canvas.strokeRect(0, 0, this.w, this.h);
    };

    Canvas.prototype.paint_cell = function(x, y, color) {
      this.canvas.fillStyle = color;
      this.canvas.fillRect(x * cw, y * cw, cw, cw);
      this.canvas.strokeStyle = "#FFF";
      return this.canvas.strokeRect(x * cw, y * cw, cw, cw);
    };

    return Canvas;

  })();

  canvas = new Canvas();

  Point = (function() {

    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    Point.prototype.paint = function(color) {
      if (color == null) {
        color = "#00F";
      }
      return canvas.paint_cell(this.x, this.y, color);
    };

    return Point;

  })();

  Food = (function(_super) {

    __extends(Food, _super);

    function Food(w, h) {
      this.x = Math.round(Math.random() * (w - cw) / cw);
      this.y = Math.round(Math.random() * (h - cw) / cw);
    }

    return Food;

  })(Point);

  Snake = (function() {

    function Snake(length) {
      var i;
      if (length == null) {
        length = 4;
      }
      this.array = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = length; _i >= 0; i = _i += -1) {
          _results.push(new Point(i, 0));
        }
        return _results;
      })();
    }

    Snake.prototype.head = function() {
      return this.array[0];
    };

    Snake.prototype.paint = function() {
      var point, _i, _len, _ref, _results;
      _ref = this.array;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        _results.push(point.paint());
      }
      return _results;
    };

    return Snake;

  })();

  Game = (function() {

    function Game() {
      var _this = this;
      $(document).ready(function() {
        $(document).keydown(function(e) {
          switch (e.which) {
            case 65:
              if (_this.d !== "right") {
                return _this.d = "left";
              }
              break;
            case 87:
              if (_this.d !== "down") {
                return _this.d = "up";
              }
              break;
            case 68:
              if (_this.d !== "left") {
                return _this.d = "right";
              }
              break;
            case 83:
              if (_this.d !== "up") {
                return _this.d = "down";
              }
          }
        });
        return _this.init();
      });
    }

    Game.prototype.init = function() {
      var _this = this;
      this.d = "right";
      this.snake = new Snake();
      this.food = new Food(canvas.w, canvas.h);
      this.score = 0;
      if (this.game_loop != null) {
        clearInterval(this.game_loop);
      }
      return this.game_loop = setInterval((function() {
        return _this.paint();
      }), 60);
    };

    Game.prototype.check_collision = function(x, y) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.snake.array.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.snake.array[i].x === x && this.snake.array[i].y === y) {
          return true;
        }
      }
      return false;
    };

    Game.prototype.next_move = function() {
      var nx, ny;
      nx = this.snake.head().x;
      ny = this.snake.head().y;
      switch (this.d) {
        case "right":
          nx++;
          break;
        case "left":
          nx--;
          break;
        case "up":
          ny--;
          break;
        case "down":
          ny++;
      }
      switch (nx) {
        case -1:
          nx = canvas.w / cw - 1;
          break;
        case canvas.w / cw:
          nx = 0;
      }
      switch (ny) {
        case -1:
          ny = canvas.h / cw - 1;
          break;
        case canvas.h / cw:
          ny = 0;
      }
      return {
        x: nx,
        y: ny
      };
    };

    Game.prototype.play = function(move) {
      var tail;
      if (this.check_collision(move.x, move.y)) {
        return false;
      }
      if (move.x === this.food.x && move.y === this.food.y) {
        tail = new Point(move.x, move.y);
        this.score++;
        this.food = new Food(canvas.w, canvas.h);
      } else {
        tail = this.snake.array.pop();
        tail.x = move.x;
        tail.y = move.y;
      }
      this.snake.array.unshift(tail);
      return true;
    };

    Game.prototype.paint = function() {
      canvas.reset();
      if (!this.play(this.next_move())) {
        return this.init();
      }
      this.snake.paint();
      this.food.paint();
      return canvas.canvas.fillText("Score: " + this.score, 5, canvas.h - 5);
    };

    return Game;

  })();

  game = new Game();

}).call(this);
