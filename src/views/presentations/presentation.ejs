<!doctype html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=1024" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <title>Introducción a CoffeeScript</title>
    <link href="/css/impress-demo.css" rel="stylesheet" />
	<!-- Metro UI Css -->
	<%- css('modern.css') %>
	<%- css('modern-responsive.css') %>   
	<!-- Presentation styles -->
	<%- css('presentation.css') %>
    <!--<%- css('impress-demo.css') %>    -->
    <!-- Jquery -->
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>
    <!-- Highlight.js -->
    <%- css('highlight/googlecode.css') %>
    <%- js('highlight.pack.js') %>
    <script>hljs.initHighlightingOnLoad();</script>
    <link rel="shortcut icon" href="favicon.png" />
</head>

<body class="impress-not-supported">

<!-- QUITA ESTO DE AQUI -->
<script type="text/javascript">
$(document).ready(function(){
	//Canvas stuff
	var canvas = $("#canvas")[0];
	var ctx = canvas.getContext("2d");
	var w = $("#canvas").width();
	var h = $("#canvas").height();
	
	//Lets save the cell width in a variable for easy control
	var cw = 10;
	var d;
	var food;
	var score;
	
	//Lets create the snake now
	var snake_array; //an array of cells to make up the snake
	
	function init()
	{
		d = "right"; //default direction
		create_snake();
		create_food(); //Now we can see the food particle
		//finally lets display the score
		score = 0;
		
		//Lets move the snake now using a timer which will trigger the paint function
		//every 60ms
		if(typeof game_loop != "undefined") clearInterval(game_loop);
		game_loop = setInterval(paint, 60);
	}
	init();
	
	function create_snake()
	{
		var length = 5; //Length of the snake
		snake_array = []; //Empty array to start with
		for(var i = length-1; i>=0; i--)
		{
			//This will create a horizontal snake starting from the top left
			snake_array.push({x: i, y:0});
		}
	}
	
	//Lets create the food now
	function create_food()
	{
		food = {
			x: Math.round(Math.random()*(w-cw)/cw), 
			y: Math.round(Math.random()*(h-cw)/cw), 
		};
		//This will create a cell with x/y between 0-44
		//Because there are 45(450/10) positions accross the rows and columns
	}
	
	//Lets paint the snake now
	function paint()
	{
		//To avoid the snake trail we need to paint the BG on every frame
		//Lets paint the canvas now
		ctx.fillStyle = "#CCC";
		ctx.fillRect(0, 0, w, h);
		/*ctx.strokeStyle = "black";*/
		ctx.strokeRect(0, 0, w, h);
		
		//The movement code for the snake to come here.
		//The logic is simple
		//Pop out the tail cell and place it infront of the head cell
		var nx = snake_array[0].x;
		var ny = snake_array[0].y;
		//These were the position of the head cell.
		//We will increment it to get the new head position
		//Lets add proper direction based movement now
		if(d == "right") nx++;
		else if(d == "left") nx--;
		else if(d == "up") ny--;
		else if(d == "down") ny++;
		
		//Lets add the game over clauses now
		//This will restart the game if the snake hits the wall
		//Lets add the code for body collision
		//Now if the head of the snake bumps into its body, the game will restart
		if(nx == -1 || nx == w/cw || ny == -1 || ny == h/cw || check_collision(nx, ny, snake_array))
		{
			//restart game
			init();
			//Lets organize the code a bit now.
			return;
		}
		
		//Lets write the code to make the snake eat the food
		//The logic is simple
		//If the new head position matches with that of the food,
		//Create a new head instead of moving the tail
		if(nx == food.x && ny == food.y)
		{
			var tail = {x: nx, y: ny};
			score++;
			//Create new food
			create_food();
		}
		else
		{
			var tail = snake_array.pop(); //pops out the last cell
			tail.x = nx; tail.y = ny;
		}
		//The snake can now eat the food.
		
		snake_array.unshift(tail); //puts back the tail as the first cell
		
		for(var i = 0; i < snake_array.length; i++)
		{
			var c = snake_array[i];
			//Lets paint 10px wide cells
			paint_cell(c.x, c.y);
		}
		
		//Lets paint the food
		paint_cell(food.x, food.y);
		//Lets paint the score
		var score_text = "Score: " + score;
		ctx.fillText(score_text, 5, h-5);
	}
	
	//Lets first create a generic function to paint cells
	function paint_cell(x, y)
	{
		ctx.fillStyle = "blue";
		ctx.fillRect(x*cw, y*cw, cw, cw);
		ctx.strokeStyle = "white";
		ctx.strokeRect(x*cw, y*cw, cw, cw);
	}
	
	function check_collision(x, y, array)
	{
		//This function will check if the provided x/y coordinates exist
		//in an array of cells or not
		for(var i = 0; i < array.length; i++)
		{
			if(array[i].x == x && array[i].y == y)
			 return true;
		}
		return false;
	}
	
	//Lets add the keyboard controls now
	$(document).keydown(function(e){
		var key = e.which;
		//We will add another clause to prevent reverse gear
		if(key == "65" && d != "right") d = "left";
		else if(key == "87" && d != "down") d = "up";
		else if(key == "68" && d != "left") d = "right";
		else if(key == "83" && d != "up") d = "down";
		//The snake is now keyboard controllable
	})
})
</script>


<div class="fallback-message">
    <p>Tu navegador <b>no posee las características requeridas</b> para ver la presentación, así que se presenta
    	una versión simplificada de la misma</p>
    <p>Para tener una mejor experiencia, por favor utiliza <b>Chrome</b>, <b>Safari</b> o <b>Firefox</b>.</p>
</div>

<div id="impress">

	<div id="start" class="step" data-x="0" data-scale="8" data-y="0">
		<h1>Introducción a <small>CoffeeScript</small></h1>
		<p class="center"><img src="/img/coffeescript_logo.png"/></p>
	</div>
	<div id="content" class="step" data-x="10200" data-y="0" data-scale="8" data-rotate-y="40">
		<h2>Introducción a <small>CoffeeScript</small><span class="right">Contenido</span></h2>
		<div class="tiles">
			<div class="tile double bg-color-blue">
				<div class="tile-content icon"><img src="/img/what.png"/></div>
				<div class="brand">
					<h3>¿Qué es Javascript?</h3>
				</div>
			</div>
			<div class="tile bg-color-blueDark">
				<div class="tile-content icon"><img src="/img/history.png"/></div>
				<div class="brand">
					<h3>Historia</h3>
				</div>
			</div>			
			<div class="tile double bg-color-purple">
				<div class="tile-content icon"><img src="/img/what-to-do.png"/></div>
				<div class="brand">
					<h3>¿Qué se puede hacer?</h3>
				</div>
			</div>	
			<div class="tile bg-color-yellow">
				<div class="tile-content icon"><img src="/img/coffeescript_logo_white.png"/></div>
				<div class="brand">
					<h3>CoffeeScript</h3>
				</div>
			</div>
			<div class="tile bg-color-pink">
				<div class="tile-content icon"><img src="/img/sintaxis.png"/></div>
				<div class="brand">
					<h3>Sintaxis</h3>
				</div>
			</div>	
			<div class="tile bg-color-green">
				<div class="tile-content icon"><img src="/img/install.png"/></div>
				<div class="brand">
					<h3>Instalación</h3>
				</div>
			</div>	
			<div class="tile bg-color-greenDark">
				<div class="tile-content icon"><img src="/img/compile.png"/></div>
				<div class="brand">
					<h3>Compilar</h3>
				</div>
			</div>				
			<div class="tile bg-color-darken">
				<div class="tile-content icon"><img src="/img/examples.png"/></div>
				<div class="brand">
					<h3>Ejemplos</h3>
				</div>
			</div>							
		</div>
	</div>
    <div id="whatIs" class="step" data-x="8300" data-y="3000" data-rotate="-90" data-rotate-y="40" data-scale="4">
        <p>es un lenguaje <b class="positioning">dinámico</b>, <b class="rotating">interpretado</b> y de tipado <b class="positioningDown">débil</b></p>
    </div>	
    <div id="paradigms" class="step" data-x="8400" data-y="6000" data-rotate="-180" data-rotate-y="40" data-scale="4">
    	<p>Permite programación orientada a <b>objetos</b>, <b>imperativa</b> o <b>funcional</b></p>
    	<p><b>No</b> es de propósito general</p>
	</div>
	<div id="jsSyntax" class="step" data-x="12500" data-y="6000" data-scale="1" data-rotate-y="40" data-rotate="-45">
		<div>
			<pre>
				<code class="javascript">
					personas = ["Victor", "Juan", "Pedro", "Luis"];
					for (_i = 0, _len = personas.length; _i < _len; _i++) {
						persona = personas[_i];
						console.log(persona);
					}
				</code>
			</pre>			
		</div>
	</div>
	<div id="history1" class="step" data-x="2000" data-y="6000" data-scale="4" data-rotate="-180" data-rotate-y="40">
		Fue creado por un empleado de <b>Netscape</b> para el navegador de la empresa en 1995.
		<p class="center"><small>Brendan Eich</small>&nbsp;<img src="/img/brendan.jpeg"/></p>
	</div>
	<div id="whatCanIdo" class="step" data-x="4500" data-y="5000" data-scale="2" data-rotate="-180" data-rotate-y="40">
		<ul>
			<li>Funciones que interactúen con el DOM</li>
			<li>Cargar contenido vía AJAX</li>
			<li>Animaciones (esta presentación)</li>
			<li>Juegos</li>
			<li>Validación de formularios</li>
		</ul>		
	</div>
	<div id="snake" class="step" data-x="4870" data-y="4850" data-scale="0.1" data-rotate="-180" data-rotate-y="40">
		<canvas id="canvas" width="450" height="450"></canvas>
	</div>	
	<div id="stats" data-x="13700" data-y="3000" data-rotate="-90" data-rotate-y="40" data-scale="4" class="step">
		<img src="/img/stats.jpg"/>
	</div>
	<div id="stats2" data-x="17000" data-y="3000" data-rotate="-90" data-rotate-y="40" data-scale="2" class="step">
	</div>
	<div id="stats3" data-x="20000" data-y="3000" data-rotate="-90" data-rotate-y="40" data-scale="1" class="step">
	</div>	
	<div id="graphics" class="step" data-x="17000" data-y="5600" data-rotate-y="40" data-scale="4" data-rotate="0">
		<img src="/img/graphs.png"/>
	</div>
</div>
<%- js('impress.js')%>
<script>impress().init();</script>

</body>
</html>
